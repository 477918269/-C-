开头：我们先说说继承的概念吧：
继承是C++这种面对对象语言的可以使代码复用的手段。
它允许程序员在原有类的基础上对该类进行拓展，增加功能，这样的类叫做派生类
继承实现了程序由简单到复杂的过程。

而继承由于不同的关系，会造成不同的结果：
继承关系有public公有继承，protect保护继承，private私有继承
而派生类继承基类成员后访问会出现一些变化：
1.基类private成员在派生类中是不可见的，所谓的不可见是，派生类将基类的private对象继承下来，但是不能对基类的private对象进行访问和操作，不管是类中还是类外都不可以。
2..除了之前说到的基类的私有成员是不可见的意外，其他成员在子类的定义被缩小了。
3.如果基类的成员不想在类外被访问，只想在派生类中被使用，则用protect进行修饰。
4.使用关键字class时候访问限定符默认为private,使用struct时候默认访问限定符为public

更进一步的继承，就需要讲到关于基类和派生类之间的关系了。

一.基类和派生类的赋值转换:
1.派生类对象可以赋值给基类对象/基类引用/基类的指针
2.基类对象不能直接赋值给派生类对象
3.基类的指针可以通过强制类型转换的方式赋值给派生类的指针。但有可能会出现内存越界的行为。这种赋值方法，就会出现我们常说的切片行为。

二.继承时的作用域
1.基类和派生类都有各自的作用域
2.如果派生类中出现基类的同名函数或同名变量，就会出现隐藏也就是常说的重定义。
3.如果时成员函数要构成隐藏的话，只需名字相同即可。

三.派生类的默认成员函数：
1.构造函数:派生类的构造函数必须调用基类的构造函数初始化属于基类的那一部分成员。
2.拷贝构造：派生类的拷贝构造必须调用基类的拷贝构造完成基类的初始化
3.赋值拷贝：赋值拷贝也需要嗲用基类的赋值拷贝完成基类的赋值
在这部分最重要的是派生类的初始化和析构
派生类对象的初始化先调用基类的构造再调用派生类的构造
派生类对象的析构先调用派生类的析构再调用基类的析构。


四.继承及友元：
友元不能被继承，派生类不能访问基类的友元。
五.继承及静态成员
基类定义了static成员，则整个继承体系中只存在这一个静态成员变量，不管有多少个类也只存在一个静态成员变量。

六.关于C++的重大缺陷，菱形继承
菱形继承也是多继承的一种特殊情况，它存在二义性和冗余性的缺点。
而那些写C++底层的大佬们也找到了解决方法，那就是通过虚拟继承virtual的方式来解决菱形继承的二义性和冗余性。
写代码...
B,C各有一指针，这两个指针叫做虚基表指针，他们都指向虚基表。而虚基表存的是内存偏移量，通过内存偏移找到他们各自的a村的值。
通过这种方式解决二义性和数据冗余。



