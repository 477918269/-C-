作用:
让程序监听多个文件描述符的状态变化的，程序会在被监视文件这里等待，直到由一个或多个发生了状态变化。

int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval* timeout);
参数解释:
1.nfds:所关心的文件描述符的最大值加一。
2.readfds,writefds,exceptfds:需要检测的可读文件描述符集合，可写文件描述符集合及异常文件描述符的集合。
这些set_fd实际上是一个个位图。这些参数即是输入参数也是输出参数，作为输入参数是将你想要关注的文件描述符到为途中。而select函数最后返回读写已经就绪的文件描述符位图。
3.timeout:select函数等待的方式设置
补充：
set_fd是位图，系统为我们提供了操作位图的函数：
FD_CLR（int fd, fd_set* set）用来清理set相关fd位
FD_ISSET（int fd, fd_set* set）用来测试set相关fd位是否为真
FD_SET（int fd, fd_set* set）用来设置set相关fd位
FD_ZERO(fd_set *set)用来清除描述词组set的全部位

timeout:
NULL,表示select一直被堵塞，直到某个文件描述符发生个事件
0：非阻塞，只检测是否发生，然后立即返回
特定时间值：如果指定的时间段里没有事件发生，select将超时返回。

返回值:
>0:执行成功，返回状态已经改变的文件描述符个数
0：此次任务超时，在规定的时间内没有文件描述符发生变化。
返回-1：出现错误。

事件就绪问题:
读事件就绪：
1.socket内核中，接收缓冲区中的字节数，大于等于低水位标记，此时可以无阻塞的读该文件描述符，并且返回值大于0
2.socket TCP通信中，对端关闭连接，此事对该socket读，返回0
3.监视的socket上有新的连接请求
写事件就绪：
1.socket内核中，发送缓冲区可用字节数大于或等于低水位标记，此时可以无阻碍地写改文件描述符，并且返回值大于0
2.socket的写操作被关闭，对一个写操作被关闭的socket进行写操作会触发SIGPIPE
3.socket使用非阻塞connect连接成功或失败后

优缺点:
优点：
1.select占用的资源比较少
2.用户量较多的时候他的性能和效率比较好。
缺点：
1.总共监视的文件描述符是有限制的，最多1024
2.当select频繁使用时，需要把fd集合从用户态拷贝到内核态，这个开销很大
3.select所监视的文件描述符，select的调用频繁，然后他也会反复遍历，效率极低
4.因为参数为输入输出型，在操作时要一直尽心遍历，查找使用会给用户带来很大的不便。
	